DROP TYPE "VAR_ARRAY";
CREATE OR REPLACE TYPE "VAR_ARRAY" AS TABLE OF VARCHAR2(1000);
/
create or replace PACKAGE GEN_RAND AUTHID DEFINER AS
  
    FUNCTION value RETURN NUMBER PARALLEL_ENABLE;
    PRAGMA restrict_references (value, WNDS);

    FUNCTION value (low IN NUMBER, high IN NUMBER) RETURN NUMBER
                   PARALLEL_ENABLE;
    PRAGMA restrict_references (value, WNDS);
    
    FUNCTION GENERATE_NUMBER (N IN NUMBER, D IN NUMBER DEFAULT NULL,S IN VARCHAR2 DEFAULT NULL)
RETURN NUMBER
PARALLEL_ENABLE;
    PRAGMA restrict_references (value, WNDS);
    
    FUNCTION "GENERATE_VARCHAR_SET" (P1 VAR_ARRAY)
  RETURN VARCHAR2 PARALLEL_ENABLE;
    PRAGMA restrict_references (value, WNDS);

    FUNCTION GEN_VARCHAR_ALT2 (len NUMBER, FLG VARCHAR2 DEFAULT 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
  RETURN VARCHAR2 PARALLEL_ENABLE;
    PRAGMA restrict_references (value, WNDS);
    
    FUNCTION GEN_VARCHAR_ALT3 (len NUMBER, FLG VARCHAR2 DEFAULT 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
  RETURN VARCHAR2 PARALLEL_ENABLE;
    PRAGMA restrict_references (value, WNDS);
    
    FUNCTION GEN_VARCHAR_SPA (N NUMBER)
  RETURN VARCHAR2 PARALLEL_ENABLE;
    PRAGMA restrict_references (value, WNDS);
    
    FUNCTION GEN_VARCHAR_TOT (N NUMBER)
  RETURN VARCHAR2 PARALLEL_ENABLE;
    PRAGMA restrict_references (value, WNDS);

  FUNCTION GEN_VARCHAR_ISO88591 (N NUMBER)
  RETURN VARCHAR2 PARALLEL_ENABLE;
    PRAGMA restrict_references (value, WNDS);

FUNCTION GENERATE_DATE_VARCHAR(TOL IN NUMBER,M IN VARCHAR2,D IN DATE DEFAULT SYSDATE)
  RETURN VARCHAR2 PARALLEL_ENABLE;
    PRAGMA restrict_references (value, WNDS);

END GEN_RAND;
/

create or replace PACKAGE BODY GEN_RAND AS

    seed2 NUMBER:= EXP(TO_NUMBER(TO_CHAR(SYSDATE,'ss'))/59);

  
  FUNCTION value RETURN NUMBER  PARALLEL_ENABLE IS
    
    BEGIN
        seed2:=10000/(seed2 -trunc(seed2));
        seed2:= seed2 - trunc(seed2);
        RETURN seed2;
    END value;

  
    FUNCTION value ( low in NUMBER, high in NUMBER) RETURN NUMBER
                   PARALLEL_ENABLE is
    BEGIN
        RETURN (value*(high-low))+low;
    END value;
    
    FUNCTION GENERATE_NUMBER (N IN NUMBER, D IN NUMBER DEFAULT NULL,S IN VARCHAR2 DEFAULT NULL)
    RETURN NUMBER PARALLEL_ENABLE
    IS
      
    BEGIN      
      RETURN TRUNC(VALUE(CASE WHEN S='S' THEN -(POWER(10,N)-1) ELSE 1 END,POWER(10,N)-1),NVL(D,0));
    EXCEPTION
      WHEN OTHERS THEN
        RETURN NULL;
    END GENERATE_NUMBER;
    
    FUNCTION GENERATE_VARCHAR_SET (P1 VAR_ARRAY)
  RETURN VARCHAR2 PARALLEL_ENABLE
  IS
  N NUMBER(5);
  I NUMBER(5);
  BEGIN
    N:=P1.LAST;  
    RETURN P1(GEN_RAND.VALUE(1,N));
  END GENERATE_VARCHAR_SET;
  
  FUNCTION GEN_VARCHAR_ALT2 (len NUMBER, FLG VARCHAR2 DEFAULT 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
        RETURN VARCHAR2 PARALLEL_ENABLE is      -- string of <len> characters
        
        rng  NUMBER;
        n    BINARY_INTEGER;
        ccs  VARCHAR2 (128);    -- candidate character subset
        xstr VARCHAR2 (4000) := NULL;
    BEGIN
    ccs := FLG;
    rng := LENGTH(FLG);

        FOR i IN 1 .. least(len,4000) LOOP
            /* Get random integer within specified range */
            n := TRUNC(rng * value) + 1;
            /* Append character to string  */
            xstr := xstr || SUBSTR(ccs,n,1);
        END LOOP;
        RETURN xstr;
    END GEN_VARCHAR_ALT2;



 FUNCTION GEN_VARCHAR_ALT3 (len NUMBER, FLG VARCHAR2 DEFAULT 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
        RETURN VARCHAR2 PARALLEL_ENABLE is      -- string of <len> characters
        
        rng  NUMBER;
        n    BINARY_INTEGER;
        ccs  VARCHAR2 (256);    -- candidate character subset
        xstr VARCHAR2 (4000) := NULL;
    BEGIN
    ccs := FLG;
    rng := LENGTH(FLG);

        FOR i IN 1 .. least(len,4000) LOOP
            /* Get random integer within specified range */
            n := TRUNC(rng * value) + 1;
            /* Append character to string  */
            xstr := xstr || SUBSTR(ccs,n,1);
        END LOOP;
        RETURN xstr;
    END GEN_VARCHAR_ALT3;

 FUNCTION GEN_VARCHAR_SPA(N NUMBER)
RETURN VARCHAR2 PARALLEL_ENABLE
AS
BEGIN
RETURN GEN_RAND.GEN_VARCHAR_ALT2(N,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ÁáÉéíÍóÓÚúÑñüÜ');
END GEN_VARCHAR_SPA;

 FUNCTION GEN_VARCHAR_TOT(N NUMBER)
RETURN VARCHAR2 PARALLEL_ENABLE
AS
B VARCHAR2(256);
BEGIN
RETURN GEN_RAND.GEN_VARCHAR_ALT3(N,CHR(1)||CHR(2)||CHR(3)||CHR(4)||CHR(5)||CHR(6)||CHR(7)||CHR(8)||CHR(9)||CHR(10)||CHR(11)||CHR(12)||CHR(13)||CHR(14)||CHR(15)||CHR(16)||CHR(17)||CHR(18)||CHR(19)||CHR(20)||CHR(21)||CHR(22)||CHR(23)||CHR(24)||CHR(25)||CHR(26)||CHR(27)||CHR(28)||CHR(29)||CHR(30)||CHR(31)||CHR(32)||CHR(33)||CHR(34)||CHR(35)||CHR(36)||CHR(37)||CHR(38)||CHR(39)||CHR(40)||CHR(41)||CHR(42)||CHR(43)||CHR(44)||CHR(45)||CHR(46)||CHR(47)||CHR(48)||CHR(49)||CHR(50)||CHR(51)||CHR(52)||CHR(53)||CHR(54)||CHR(55)||CHR(56)||CHR(57)||CHR(58)||CHR(59)||CHR(60)||CHR(61)||CHR(62)||CHR(63)||CHR(64)||CHR(65)||CHR(66)||CHR(67)||CHR(68)||CHR(69)||CHR(70)||CHR(71)||CHR(72)||CHR(73)||CHR(74)||CHR(75)||CHR(76)||CHR(77)||CHR(78)||CHR(79)||CHR(80)||CHR(81)||CHR(82)||CHR(83)||CHR(84)||CHR(85)||CHR(86)||CHR(87)||CHR(88)||CHR(89)||CHR(90)||CHR(91)||CHR(92)||CHR(93)||CHR(94)||CHR(95)||CHR(96)||CHR(97)||CHR(98)||CHR(99)||CHR(100)||CHR(101)||CHR(102)||CHR(103)||CHR(104)||CHR(105)||CHR(106)||CHR(107)||CHR(108)||CHR(109)||CHR(110)||CHR(111)||CHR(112)||CHR(113)||CHR(114)||CHR(115)||CHR(116)||CHR(117)||CHR(118)||CHR(119)||CHR(120)||CHR(121)||CHR(122)||CHR(123)||CHR(124)||CHR(125)||CHR(126)||CHR(127)||CHR(128)||CHR(129)||CHR(130)||CHR(131)||CHR(132)||CHR(133)||CHR(134)||CHR(135)||CHR(136)||CHR(137)||CHR(138)||CHR(139)||CHR(140)||CHR(141)||CHR(142)||CHR(143)||CHR(144)||CHR(145)||CHR(146)||CHR(147)||CHR(148)||CHR(149)||CHR(150)||CHR(151)||CHR(152)||CHR(153)||CHR(154)||CHR(155)||CHR(156)||CHR(157)||CHR(158)||CHR(159)||CHR(160)||CHR(161)||CHR(162)||CHR(163)||CHR(164)||CHR(165)||CHR(166)||CHR(167)||CHR(168)||CHR(169)||CHR(170)||CHR(171)||CHR(172)||CHR(173)||CHR(174)||CHR(175)||CHR(176)||CHR(177)||CHR(178)||CHR(179)||CHR(180)||CHR(181)||CHR(182)||CHR(183)||CHR(184)||CHR(185)||CHR(186)||CHR(187)||CHR(188)||CHR(189)||CHR(190)||CHR(191)||CHR(192)||CHR(193)||CHR(194)||CHR(195)||CHR(196)||CHR(197)||CHR(198)||CHR(199)||CHR(200)||CHR(201)||CHR(202)||CHR(203)||CHR(204)||CHR(205)||CHR(206)||CHR(207)||CHR(208)||CHR(209)||CHR(210)||CHR(211)||CHR(212)||CHR(213)||CHR(214)||CHR(215)||CHR(216)||CHR(217)||CHR(218)||CHR(219)||CHR(220)||CHR(221)||CHR(222)||CHR(223)||CHR(224)||CHR(225)||CHR(226)||CHR(227)||CHR(228)||CHR(229)||CHR(230)||CHR(231)||CHR(232)||CHR(233)||CHR(234)||CHR(235)||CHR(236)||CHR(237)||CHR(238)||CHR(239)||CHR(240)||CHR(241)||CHR(242)||CHR(243)||CHR(244)||CHR(245)||CHR(246)||CHR(247)||CHR(248)||CHR(249)||CHR(250)||CHR(251)||CHR(252)||CHR(253)||CHR(254)||CHR(255)||CHR(256));
END GEN_VARCHAR_TOT;


 FUNCTION GEN_VARCHAR_ISO88591(N NUMBER)
RETURN VARCHAR2 PARALLEL_ENABLE
AS
BEGIN
RETURN GEN_RAND.GEN_VARCHAR_ALT3(N, q'ÿ!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ'||'ÿ');
END GEN_VARCHAR_ISO88591;

 FUNCTION GENERATE_DATE_VARCHAR(TOL IN NUMBER,M IN VARCHAR2,D IN DATE DEFAULT SYSDATE)
  RETURN VARCHAR2 PARALLEL_ENABLE IS
  BEGIN
  RETURN TO_CHAR(D+GEN_RAND.VALUE(-TOL,TOL),M);
  END GENERATE_DATE_VARCHAR;
    
END GEN_RAND;
/
