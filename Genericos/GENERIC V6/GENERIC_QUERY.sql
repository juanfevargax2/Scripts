CREATE OR REPLACE VIEW SOURCE_GENERATOR
AS
SELECT
PEQ_JOINS.JOINS PEQ_JOIN,
PEQ_JOINS.HINTS PEQ_HINT,
PEQ_JOINS.SELS PEQ_SEL,
DATA_GENERATOR.COD,
PEQ_JOINS_E.JOINS PEQ_JOIN_E,
PEQ_JOINS_E.HINTS PEQ_HINT_E,
PEQ_JOINS_E.SELS PEQ_SEL_E,
DATA_EXT.SQL_TEXT D_EXT,
TRAN_EXT.SQL_TEXT T_EXT,
PEQS.SOURCE_APP_COD,
PEQS.DESTINATION_APP_COD,
PEQS.TIPOLOGY_COD,
PEQS.SOCIETY_COD
FROM
DATA_GENERATOR
LEFT JOIN 
SQL_TEXT DATA_EXT
ON
DATA_EXT.COD=DATA_GENERATOR.EXT_TYPE
LEFT JOIN 
SQL_TEXT TRAN_EXT
ON
TRAN_EXT.COD=DATA_GENERATOR.TRANS_TYPE
LEFT JOIN
PEQS
ON
DATA_GENERATOR.PEQ_TYPE=PEQS.COD
LEFT JOIN
JOINS_TEXT PEQ_JOINS
ON
PEQS.COD_JOIN=PEQ_JOINS.COD

LEFT JOIN
JOINS_TEXT PEQ_JOINS_E
ON
PEQS.COD_JOIN_EXT=PEQ_JOINS_E.COD;

CREATE OR REPLACE VIEW DESTINATION AS
SELECT 
A.*,
MULTIPLE_REPLACE(CER1,T1,T2) CER,
MULTIPLE_REPLACE(ACT1,T1,T2) ACT,

CASE WHEN CER1 IS NOT NULL THEN MULTIPLE_REPLACE(ANT_CER_FLG1,T1,T2) END CER_FLG1,
CASE WHEN CER1 IS NOT NULL AND SEVERITY='L1' THEN MULTIPLE_REPLACE(ANT_CER_FLG2,T1,T2) END CER_FLG2,
CASE WHEN CER1 IS NOT NULL THEN MULTIPLE_REPLACE(ANT_ERR1,T1,T2) END ERR1,
CASE WHEN CER1 IS NOT NULL THEN MULTIPLE_REPLACE(ANT_ERR2,T1,T2) END ERR2,
CASE WHEN CER1 IS NOT NULL THEN MULTIPLE_REPLACE(ANT_CER_CHR,T1,T2) END CER_CHR,
CASE WHEN CER1 IS NOT NULL THEN MULTIPLE_REPLACE(ANT_ERR3,T1,T2) END ERR3,
CASE WHEN ACT1 IS NOT NULL THEN MULTIPLE_REPLACE(ANT_SRC_DEST1,T1,T2) END SRC_DEST1,
CASE WHEN ACT1 IS NOT NULL THEN MULTIPLE_REPLACE(ANT_SRC_DEST2,T1,T2) END SRC_DEST2,
CASE WHEN ACT1 IS NOT NULL THEN MULTIPLE_REPLACE(ANT_SRC_DEST3,T1,T2) END SRC_DEST3,
CASE WHEN ACT1 IS NOT NULL AND FLG_EFF IS NOT NULL THEN MULTIPLE_REPLACE(ANT_DELT1,T1,T2) END DELT1,
CASE WHEN ACT1 IS NOT NULL AND FLG_EFF IS NOT NULL THEN MULTIPLE_REPLACE(ANT_DELT2,T1,T2) END DELT2,
CASE WHEN ACT1 IS NOT NULL THEN MULTIPLE_REPLACE(ANT_DELT3,T1,T2) END DELT3,
CASE WHEN ACT1 IS NOT NULL AND SEVERITY='L1' THEN MULTIPLE_REPLACE(ANT_DELT4,T1,T2) END DELT4




FROM
(
SELECT
NEW T_TEXT('<VAL_PARAM>','<NULL>','<INC>','<TRANS_PARAM>','<TYPE>','<DUMMY_OPEN>','<UNKNOWN>','<PARAM_CHAR>','<DUMMY>','<COLUMN_LENGTH>','<COLUMN_PRECISION>') T1,
NEW T_TEXT(VAL_PARAM,T_NULL,T_INC,TRANS_PARAM,T_TYPE,DUMMY_OPEN,T_UNKNOWN,PARAM_CHAR,DUMMY,COLUMN_LENGTH,COLUMN_PRECISION) T2,
A.*
FROM
(
SELECT
DECODE(METADATA_DESTINATION.COLUMN_TYPE,'NUMBER','-2','DATE',q'#TO_DATE('02010001','DDMMYYYY')#') T_UNKNOWN,
DECODE(METADATA_DESTINATION.COLUMN_TYPE,'NUMBER','-3','DATE',q'#TO_DATE('03010001','DDMMYYYY')#') T_NULL,
DECODE(METADATA_DESTINATION.COLUMN_TYPE,'NUMBER','-1','DATE',q'#TO_DATE('01010001','DDMMYYYY')#') T_INC,
q'#TO_DATE('29991231','YYYYMMDD')#' DUMMY_OPEN,
METADATA_DESTINATION.COLUMN_TYPE || CASE WHEN METADATA_DESTINATION.COLUMN_TYPE <>'DATE' THEN '('||METADATA_DESTINATION.COLUMN_LENGTH||CASE WHEN METADATA_DESTINATION.COLUMN_PRECISION IS NOT NULL THEN ','||METADATA_DESTINATION.COLUMN_PRECISION END||')'END T_TYPE,
METADATA_DESTINATION.*,
CER.SQL_TEXT CER1,
ACT.SQL_TEXT ACT1,
TRANSFORMATIONS.VAL_PARAM,
TRANSFORMATIONS.TRANS_PARAM,
DECODE(METADATA_DESTINATION.COLUMN_TYPE,'DATE',q'#,'YYYY-MM-DD'#') PARAM_CHAR,
DECODE(METADATA_DESTINATION.COLUMN_TYPE,'NUMBER','-9999','DATE',q'#TRUNC(SYSDATE,'DDD')#','VARCHAR2',q'#'-9999'#','CHAR',q'#'-9999'#') DUMMY,
CASE WHEN METADATA_DESTINATION.COLUMN_NAME<>'EFF_DT' THEN 1 END FLG_EFF,
(SELECT SQL_TEXT FROM SQL_TEXT WHERE COD=11) ANT_CER_FLG1,
(SELECT SQL_TEXT FROM SQL_TEXT WHERE COD=10) ANT_CER_FLG2,
(SELECT SQL_TEXT FROM SQL_TEXT WHERE COD=12) ANT_ERR1,
(SELECT SQL_TEXT FROM SQL_TEXT WHERE COD=13) ANT_ERR2,
(SELECT SQL_TEXT FROM SQL_TEXT WHERE COD=14) ANT_CER_CHR,
(SELECT SQL_TEXT FROM SQL_TEXT WHERE COD=15) ANT_ERR3,
(SELECT SQL_TEXT FROM SQL_TEXT WHERE COD=16) ANT_SRC_DEST1,
(SELECT SQL_TEXT FROM SQL_TEXT WHERE COD=17) ANT_SRC_DEST2,
(SELECT SQL_TEXT FROM SQL_TEXT WHERE COD=18) ANT_SRC_DEST3,
(SELECT SQL_TEXT FROM SQL_TEXT WHERE COD=19) ANT_DELT1,
(SELECT SQL_TEXT FROM SQL_TEXT WHERE COD=20) ANT_DELT2,
(SELECT SQL_TEXT FROM SQL_TEXT WHERE COD=21) ANT_DELT3,
(SELECT SQL_TEXT FROM SQL_TEXT WHERE COD=22) ANT_DELT4

FROM
METADATA_DESTINATION
LEFT JOIN
TRANSFORMATIONS
ON
METADATA_DESTINATION.COD_TRANSFORMATIONS=TRANSFORMATIONS.COD

LEFT JOIN
SQL_TEXT CER
ON
TRANSFORMATIONS.VAL_TYPE=CER.COD

LEFT JOIN
SQL_TEXT ACT
ON
TRANSFORMATIONS.TRANS_TYPE=ACT.COD
)A
)A
;

CREATE OR REPLACE VIEW JOINS_TEXT AS
SELECT 
A.*,
MULTIPLE_REPLACE(J,T1,T2) JOINS,
MULTIPLE_REPLACE(HINT,T1,T2) HINTS,
MULTIPLE_REPLACE(SEL,T1,T2) SELS
FROM
(
SELECT 
JOINS.*,
SEL_JOIN.SQL_TEXT SEL,
J_JOIN.SQL_TEXT J,
HINT_JOIN.SQL_TEXT HINT,
NEW T_TEXT('<GRAL_JOIN>','<COND_JOIN>','<TYPE_JOIN>','<TYPE_JOIN_ALIAS>','<TYPE_JOIN_PREV>') T1,
NEW T_TEXT(SUB_JOIN.SQL_TEXT,COND_JOIN.SQL_TEXT,TYPE_JOIN,TYPE_JOIN_ALIAS,TYPE_JOIN_PREV) T2


FROM
JOINS
LEFT JOIN
SQL_TEXT SUB_JOIN
ON
JOINS.SUB_QUERY=SUB_JOIN.COD
LEFT JOIN
SQL_TEXT SEL_JOIN
ON
JOINS.SELECT_QUERY=SEL_JOIN.COD
LEFT JOIN
SQL_TEXT COND_JOIN
ON
JOINS.COND_QUERY=COND_JOIN.COD
LEFT JOIN
SQL_TEXT J_JOIN
ON
JOINS.JOIN_QUERY=J_JOIN.COD
LEFT JOIN
SQL_TEXT HINT_JOIN
ON
JOINS.HINT_QUERY=HINT_JOIN.COD
)A;

CREATE OR REPLACE VIEW GENERIC_QUERY_GENERATOR_EXT AS
SELECT 
CASE WHEN VARIABLES IS NOT NULL THEN VARIABLES||','||chr(10) END ||'A.*'||CASE WHEN EXT IS NOT NULL THEN ','||chr(10)||EXT END E1,
TO_CLOB(NULL) J1,TO_CLOB(NULL) H1,


CASE WHEN VARIABLES IS NOT NULL THEN VARIABLES||','||chr(10) END ||CASE WHEN D_EXT IS NOT NULL THEN D_EXT||','||chr(10) END||'A.*' E1_P,
NULL J1_P,
NULL H1_P,


CASE WHEN PEQ_SEL_E IS NOT NULL THEN PEQ_SEL_E||','||chr(10) END||'A.*' E2_P,
PEQ_JOIN_E J2_P,
PEQ_HINT_E H2_P,

CASE WHEN D_EXT IS NOT NULL THEN T_EXT||','||chr(10) END||'A.*' E3_P,
NULL J3_P,
NULL H3_P,

COLUMN_NAME_C||' B' E4_P,
NULL J4_P,
NULL H4_P,

CASE WHEN VARIABLES IS NOT NULL THEN VARIABLES||','||chr(10) END ||CASE WHEN D_EXT_ERR IS NOT NULL THEN D_EXT_ERR||','||chr(10) END||'A.*' E1_P_ERR,
NULL J1_P_ERR,
NULL H1_P_ERR,


CASE WHEN PEQ_SEL_E_ERR IS NOT NULL THEN PEQ_SEL_E_ERR||','||chr(10) END||'A.*' E2_P_ERR,
PEQ_JOIN_E_ERR J2_P_ERR,
PEQ_HINT_E_ERR H2_P_ERR,

CASE WHEN D_EXT_ERR IS NOT NULL THEN T_EXT_ERR||','||chr(10) END||'A.*' E3_P_ERR,
NULL J3_P_ERR,
NULL H3_P_ERR,

COLUMN_NAME_C||' B' E4_P_ERR,
NULL J4_P_ERR,
NULL H4_P_ERR,



A.*
FROM
(
SELECT
COD_ASSIGNMENT,
COD,
MAX(SOURCE_NAME) SOURCE_NAME,
MAX(ASSIGNMENT) ASSIGNMENT,
MAX(INTERFC) INTERFC,
CONCAT_ALL (CONCAT_EXPR (EXT,','||CHR(10))) EXT,
CONCAT_ALL (CONCAT_EXPR (PEQ_JOIN,CHR(10))) PEQ_JOIN,
CONCAT_ALL (CONCAT_EXPR (PEQ_HINT,CHR(10))) PEQ_HINT,
CONCAT_ALL (CONCAT_EXPR (PEQ_SEL,','||CHR(10))) PEQ_SEL,
CONCAT_ALL (CONCAT_EXPR (PEQ_JOIN_E,CHR(10))) PEQ_JOIN_E,
CONCAT_ALL (CONCAT_EXPR (PEQ_HINT_E,CHR(10))) PEQ_HINT_E,
CONCAT_ALL (CONCAT_EXPR (PEQ_SEL_E,','||CHR(10))) PEQ_SEL_E,
CONCAT_ALL (CONCAT_EXPR (D_EXT,','||CHR(10))) D_EXT,
CONCAT_ALL (CONCAT_EXPR (T_EXT,','||CHR(10))) T_EXT,
CONCAT_ALL (CONCAT_EXPR (PEQ_JOIN_ERR,CHR(10))) PEQ_JOIN_ERR,
CONCAT_ALL (CONCAT_EXPR (PEQ_HINT_ERR,CHR(10))) PEQ_HINT_ERR,
CONCAT_ALL (CONCAT_EXPR (PEQ_SEL_ERR,','||CHR(10))) PEQ_SEL_ERR,
CONCAT_ALL (CONCAT_EXPR (PEQ_JOIN_E_ERR,CHR(10))) PEQ_JOIN_E_ERR,
CONCAT_ALL (CONCAT_EXPR (PEQ_HINT_E_ERR,CHR(10))) PEQ_HINT_E_ERR,
CONCAT_ALL (CONCAT_EXPR (PEQ_SEL_E_ERR,','||CHR(10))) PEQ_SEL_E_ERR,
CONCAT_ALL (CONCAT_EXPR (D_EXT_ERR,','||CHR(10))) D_EXT_ERR,
CONCAT_ALL (CONCAT_EXPR (T_EXT_ERR,','||CHR(10))) T_EXT_ERR,

LISTAGG(COLUMN_NAME,'||'||CHR(10)) WITHIN GROUP (ORDER BY COLUMN_ID) COLUMN_NAME_C,
MAX(VARIABLES) VARIABLES
FROM
(

SELECT 
ASSIGNMENT,
INTERFC,
COD_ASSIGNMENT,
COD,
COLUMN_ID,
COLUMN_NAME,
MULTIPLE_REPLACE(EXT,T1,T2) EXT,
MULTIPLE_REPLACE(PEQ_JOIN,T1,T2) PEQ_JOIN,
MULTIPLE_REPLACE(PEQ_HINT,T1,T2) PEQ_HINT,
MULTIPLE_REPLACE(PEQ_SEL,T1,T2) PEQ_SEL,
MULTIPLE_REPLACE(PEQ_JOIN_E,T1,T2) PEQ_JOIN_E,
MULTIPLE_REPLACE(PEQ_HINT_E,T1,T2) PEQ_HINT_E,
MULTIPLE_REPLACE(PEQ_SEL_E,T1,T2) PEQ_SEL_E,
MULTIPLE_REPLACE(D_EXT,T1,T2) D_EXT,
MULTIPLE_REPLACE(T_EXT,T1,T2) T_EXT,
MULTIPLE_REPLACE(PEQ_JOIN_ERR,T1,T2) PEQ_JOIN_ERR,
MULTIPLE_REPLACE(PEQ_HINT_ERR,T1,T2) PEQ_HINT_ERR,
MULTIPLE_REPLACE(PEQ_SEL_ERR,T1,T2) PEQ_SEL_ERR,
MULTIPLE_REPLACE(PEQ_JOIN_E_ERR,T1,T2) PEQ_JOIN_E_ERR,
MULTIPLE_REPLACE(PEQ_HINT_E_ERR,T1,T2) PEQ_HINT_E_ERR,
MULTIPLE_REPLACE(PEQ_SEL_E_ERR,T1,T2) PEQ_SEL_E_ERR,
MULTIPLE_REPLACE(D_EXT_ERR,T1,T2) D_EXT_ERR,
MULTIPLE_REPLACE(T_EXT_ERR,T1,T2) T_EXT_ERR,

VARIABLES,
SOURCE_NAME
FROM
(
SELECT 
ASSIGNMENT.ASSIGNMENT,
INTERFACE_ASSIGNED.INTERFC,
INTERFACE_ASSIGNED.COD_ASSIGNMENT,
INTERFACE_ASSIGNED.COD,
METADATA_SOURCE.COLUMN_NAME,
NEW T_TEXT('<ASSIGNMENT>','<COLUMN_ID>','<COLUMN_NAME>','<SEP>','<COD_AP_OR>','<COD_AP_DE>','<COD_TIP>','<COD_SOC>','<COD_AP_OR_ERR>','<COD_AP_DE_ERR>','<COD_TIP_ERR>','<COD_SOC_ERR>','<COLUMN_LENGTH>','<COLUMN_PRECISION>','<COLUMN_LENGTH_SUM>','<INTERFC>','<INTERFC_ALIAS>','<SOURCE_PARAM>') T1,
NEW T_TEXT(ASSIGNMENT.ASSIGNMENT,METADATA_SOURCE.COLUMN_ID,METADATA_SOURCE.COLUMN_NAME,INTERFACE_ASSIGNED.INTERFC_SEPARATOR,SOURCE_GENERATOR.SOURCE_APP_COD,SOURCE_GENERATOR.DESTINATION_APP_COD,SOURCE_GENERATOR.TIPOLOGY_COD,SOURCE_GENERATOR.SOCIETY_COD,SOURCE_GENERATOR_ERR.SOURCE_APP_COD,SOURCE_GENERATOR_ERR.DESTINATION_APP_COD,SOURCE_GENERATOR_ERR.TIPOLOGY_COD,SOURCE_GENERATOR_ERR.SOCIETY_COD,COLUMN_LENGTH,COLUMN_PRECISION,COLUMN_LENGTH_SUM,INTERFACE_ASSIGNED.INTERFC,INTERFACE_ASSIGNED.INTERFC_ALIAS,METADATA_SOURCE.SOURCE_PARAM) T2,
SQL_TEXT.SQL_TEXT EXT,
METADATA_SOURCE.COLUMN_ID,
INTERFACE_ASSIGNED.VARIABLES,
SOURCE_NAME,
SOURCE_GENERATOR.PEQ_JOIN,
SOURCE_GENERATOR.PEQ_HINT,
SOURCE_GENERATOR.PEQ_SEL,
SOURCE_GENERATOR.PEQ_JOIN_E,
SOURCE_GENERATOR.PEQ_HINT_E,
SOURCE_GENERATOR.PEQ_SEL_E,
SOURCE_GENERATOR.D_EXT,
SOURCE_GENERATOR.T_EXT,
SOURCE_GENERATOR_ERR.PEQ_JOIN PEQ_JOIN_ERR,
SOURCE_GENERATOR_ERR.PEQ_HINT PEQ_HINT_ERR,
SOURCE_GENERATOR_ERR.PEQ_SEL PEQ_SEL_ERR,
SOURCE_GENERATOR_ERR.PEQ_JOIN_E PEQ_JOIN_E_ERR,
SOURCE_GENERATOR_ERR.PEQ_HINT_E PEQ_HINT_E_ERR,
SOURCE_GENERATOR_ERR.PEQ_SEL_E PEQ_SEL_E_ERR,
SOURCE_GENERATOR_ERR.D_EXT D_EXT_ERR,
SOURCE_GENERATOR_ERR.T_EXT T_EXT_ERR


FROM
INTERFACE_ASSIGNED
INNER JOIN
ASSIGNMENT 
ON
ASSIGNMENT.COD=INTERFACE_ASSIGNED.COD_ASSIGNMENT
LEFT JOIN
SOURCES
ON
INTERFACE_ASSIGNED.COD_SOURCE=SOURCES.COD
LEFT JOIN
SQL_TEXT ON
SQL_TEXT.COD=INTERFACE_ASSIGNED.COD_EXT
LEFT JOIN
(
SELECT 
METADATA_SOURCE.*,
TO_CHAR(NVL(SUM(COLUMN_LENGTH)OVER(PARTITION BY METADATA_SOURCE.COD ORDER BY COLUMN_ID ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING),0)+1) COLUMN_LENGTH_SUM
FROM
METADATA_SOURCE
)METADATA_SOURCE
ON
METADATA_SOURCE.COD=INTERFACE_ASSIGNED.COD_SOURCE 
LEFT JOIN
SOURCE_GENERATOR
ON
SOURCE_GENERATOR.COD=METADATA_SOURCE.COD_EXT

LEFT JOIN
SOURCE_GENERATOR SOURCE_GENERATOR_ERR
ON
SOURCE_GENERATOR_ERR.COD=METADATA_SOURCE.COD_EXT_ERR


))
GROUP BY 
COD_ASSIGNMENT,
COD
)A
;

CREATE OR REPLACE VIEW GENERIC_QUERY_GENERATOR_DEST AS
SELECT 
CASE WHEN ANT IS NOT NULL THEN ANT||','||chr(10) END||'A.*' E2,
TO_CLOB(NULL) J2,TO_CLOB(NULL) H2,
CASE WHEN PEQ_SEL IS NOT NULL THEN PEQ_SEL||','||chr(10) END||'A.*' E3,
PEQ_JOIN J3,
PEQ_HINT H3,
CASE WHEN JOIN_SEL IS NOT NULL THEN JOIN_SEL||','||chr(10) END||'A.*' E4,
JOIN_JOIN J4,
JOIN_HINT H4,
TO_CLOB(CASE WHEN CER IS NOT NULL THEN CER||','||chr(10) END)||
TO_CLOB(CASE WHEN ACT IS NOT NULL THEN ACT||','||chr(10) END)||'A.*' E5,
TO_CLOB(NULL) J5,
TO_CLOB(NULL) H5,

'A.*'||
CASE WHEN CER_FLG1 IS NOT NULL THEN ','||chr(10)||'CASE WHEN '||chr(10)||CER_FLG1||chr(10)||q'#THEN 'Y' END FLG1#'END|| 
CASE WHEN CER_FLG2 IS NOT NULL THEN ','||chr(10)||'CASE WHEN '||chr(10)||CER_FLG2||chr(10)||q'#THEN 'Y' END FLG2#'END|| 
CASE WHEN CER_CHR  IS NOT NULL THEN ','||chr(10)||CER_CHR END E6,
TO_CLOB(NULL) H6,
TO_CLOB(NULL) J6,
ERR_2||','||chr(10)||ERR_3 ERR2,

A.*
FROM
(
SELECT
COD_ASSIGNMENT,
COD,
MAX(ASSIGNMENT) ASSIGNMENT,
MAX(INTERFC) INTERFC,
MAX(OWNER) OWNER,
MAX(DBLINK) DBLINK,
CONCAT_ALL (CONCAT_EXPR (ANT,','||CHR(10))) ANT,
CONCAT_ALL (CONCAT_EXPR (PEQ_JOIN,CHR(10))) PEQ_JOIN,
CONCAT_ALL (CONCAT_EXPR (PEQ_HINT,CHR(10))) PEQ_HINT,
CONCAT_ALL (CONCAT_EXPR (PEQ_SEL,','||CHR(10))) PEQ_SEL,
CONCAT_ALL (CONCAT_EXPR (JOIN_JOIN,CHR(10))) JOIN_JOIN,
CONCAT_ALL (CONCAT_EXPR (JOIN_HINT,CHR(10))) JOIN_HINT,
CONCAT_ALL (CONCAT_EXPR (JOIN_SEL,','||CHR(10))) JOIN_SEL,
CONCAT_ALL (CONCAT_EXPR (CER,','||CHR(10))) CER,
CONCAT_ALL (CONCAT_EXPR (ACT, ','||CHR(10))) ACT,
CONCAT_ALL (CONCAT_EXPR (CER_FLG1, ' OR'||CHR(10))) CER_FLG1,
CONCAT_ALL (CONCAT_EXPR (CER_FLG2, ' AND'||CHR(10))) CER_FLG2,
CONCAT_ALL (CONCAT_EXPR (ERR1, ','||CHR(10))) ERR1,
CONCAT_ALL (CONCAT_EXPR (ERR2, ','||CHR(10))) ERR_2,
CONCAT_ALL (CONCAT_EXPR (ERR3, ','||CHR(10))) ERR_3,
CONCAT_ALL (CONCAT_EXPR (CER_CHR, ','||CHR(10))) CER_CHR,
CONCAT_ALL (CONCAT_EXPR (SRC_DEST1, ','||CHR(10))) SRC_DEST1,
CONCAT_ALL (CONCAT_EXPR (SRC_DEST2, ','||CHR(10))) SRC_DEST2,
CONCAT_ALL (CONCAT_EXPR (SRC_DEST3, ' AND'||CHR(10))) SRC_DEST3,
CONCAT_ALL (CONCAT_EXPR (DELT1, ','||CHR(10))) DELT1,
CONCAT_ALL (CONCAT_EXPR (DELT2, ' AND'||CHR(10))) DELT2,
CONCAT_ALL (CONCAT_EXPR (DELT3, ','||CHR(10))) DELT3,
CONCAT_ALL (CONCAT_EXPR (DELT4, ' AND'||CHR(10))) DELT4

FROM
(

SELECT 
ASSIGNMENT,
INTERFC,
COD_ASSIGNMENT,
COD,
COLUMN_ID,
OWNER,DBLINK,
MULTIPLE_REPLACE(ANT,T1,T2) ANT,
MULTIPLE_REPLACE(PEQ_JOIN,T1,T2) PEQ_JOIN,
MULTIPLE_REPLACE(PEQ_HINT,T1,T2) PEQ_HINT,
MULTIPLE_REPLACE(PEQ_SEL,T1,T2) PEQ_SEL,
MULTIPLE_REPLACE(JOIN_JOIN,T1,T2) JOIN_JOIN,
MULTIPLE_REPLACE(JOIN_HINT,T1,T2) JOIN_HINT,
MULTIPLE_REPLACE(JOIN_SEL,T1,T2) JOIN_SEL,
MULTIPLE_REPLACE(CER,T1,T2) CER,
MULTIPLE_REPLACE(ACT,T1,T2) ACT,
MULTIPLE_REPLACE(CER_FLG1,T1,T2) CER_FLG1,
MULTIPLE_REPLACE(CER_FLG2,T1,T2) CER_FLG2,
MULTIPLE_REPLACE(ERR1,T1,T2) ERR1,
MULTIPLE_REPLACE(ERR2,T1,T2) ERR2,
MULTIPLE_REPLACE(CER_CHR,T1,T2) CER_CHR,
MULTIPLE_REPLACE(ERR3,T1,T2) ERR3,
MULTIPLE_REPLACE(SRC_DEST1,T1,T2) SRC_DEST1,
MULTIPLE_REPLACE(SRC_DEST2,T1,T2) SRC_DEST2,
MULTIPLE_REPLACE(SRC_DEST3,T1,T2) SRC_DEST3,
MULTIPLE_REPLACE(DELT1,T1,T2) DELT1,
MULTIPLE_REPLACE(DELT2,T1,T2) DELT2,
MULTIPLE_REPLACE(DELT3,T1,T2) DELT3,
MULTIPLE_REPLACE(DELT4,T1,T2) DELT4

FROM
(
SELECT 
ASSIGNMENT.ASSIGNMENT,
INTERFACE_ASSIGNED.INTERFC,
INTERFACE_ASSIGNED.COD_ASSIGNMENT,
INTERFACE_ASSIGNED.COD,
NEW T_TEXT('<COLUMN_NAME>','<COLUMN_NAME_DEST>','<ASSIGNMENT>','<COD_AP_OR>','<COD_AP_DE>','<COD_TIP>','<COD_SOC>','<OWNER_JOIN>','<DLK_JOIN>','<SRC_STM_CODE>','<VAL_PARAM>','<NULL>','<INC>','<TRANS_PARAM>','<TYPE>','<DUMMY_OPEN>') T1,
NEW T_TEXT(METADATA_DESTINATION.ANT_PARAM,METADATA_DESTINATION.COLUMN_NAME,ASSIGNMENT.ASSIGNMENT,PEQS.SOURCE_APP_COD,PEQS.DESTINATION_APP_COD,PEQS.TIPOLOGY_COD,PEQS.SOCIETY_COD,OWNER,DBLINK,SRC_STM_CODE,VAL_PARAM,T_NULL,T_INC,TRANS_PARAM,T_TYPE,DUMMY_OPEN) T2,
OWNER,DBLINK,
METADATA_DESTINATION.COD COLUMN_ID,
METADATA_DESTINATION.ANT_PARAM COLUMN_NAME,
METADATA_DESTINATION.COLUMN_NAME COLUMN_NAME_DEST,
CASE WHEN METADATA_DESTINATION.ANT_PARAM IS NOT NULL THEN (SELECT SQL_TEXT FROM SQL_TEXT WHERE COD=6) END ANT,
PEQ_JOINS.JOINS PEQ_JOIN,
PEQ_JOINS.HINTS PEQ_HINT,
PEQ_JOINS.SELS PEQ_SEL,
JOINS.JOINS JOIN_JOIN,
JOINS.HINTS JOIN_HINT,
JOINS.SELS JOIN_SEL,
CER,
ACT,
CER_FLG1,
CER_FLG2,
ERR1,
ERR2,
CER_CHR,
ERR3,
SRC_DEST1,
SRC_DEST2,
SRC_DEST3,
DELT1,
DELT2,
DELT3,
DELT4


FROM
INTERFACE_ASSIGNED
INNER JOIN
ASSIGNMENT 
ON
ASSIGNMENT.COD=INTERFACE_ASSIGNED.COD_ASSIGNMENT
LEFT JOIN
SOURCES
ON
SOURCES.COD=INTERFACE_ASSIGNED.COD_SOURCE
LEFT JOIN
DESTINATION METADATA_DESTINATION
ON
METADATA_DESTINATION.COD_INTERFACE_ASSIGNED=INTERFACE_ASSIGNED.COD AND
METADATA_DESTINATION.COD_ASSIGNMENT=INTERFACE_ASSIGNED.COD_ASSIGNMENT
LEFT JOIN
PEQS
ON
METADATA_DESTINATION.COD_PEQ=PEQS.COD
LEFT JOIN
JOINS_TEXT PEQ_JOINS
ON
PEQS.COD_JOIN=PEQ_JOINS.COD
LEFT JOIN
JOINS_TEXT JOINS
ON
METADATA_DESTINATION.COD_JOIN=JOINS.COD

))
GROUP BY 
COD_ASSIGNMENT,
COD
)A
;

CREATE OR REPLACE VIEW GENERIC_QUERY_GENERATOR_GRAL AS
SELECT
DEST.*,
E1,J1,H1,
E1_P,J1_P,H1_P,
E2_P,J2_P,H2_P,
E3_P,J3_P,H3_P,
E4_P,J4_P,H4_P,
E1_P_ERR,J1_P_ERR,H1_P_ERR,
E2_P_ERR,J2_P_ERR,H2_P_ERR,
E3_P_ERR,J3_P_ERR,H3_P_ERR,
E4_P_ERR,J4_P_ERR,H4_P_ERR,
SOURCE_NAME
FROM
GENERIC_QUERY_GENERATOR_DEST DEST
INNER JOIN
GENERIC_QUERY_GENERATOR_EXT EXT
ON
DEST.COD_ASSIGNMENT=EXT.COD_ASSIGNMENT AND
DEST.COD=EXT.COD;